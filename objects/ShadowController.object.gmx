<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
if(instance_number(ShadowController) &gt; 1) { //No duplicates
    instance_destroy();
}
shadows = noone;
current[0] = noone;
wallCount = 0;
newRoom = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear surfaces
for(var i = 0; i &lt; array_length_1d(current); i++) {
    if(surface_exists(current[i])) {
        surface_free(current[i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Always redraw on new room
newRoom = true;
for(var i = 0; i &lt; instance_number(Lightbulb); i++) {
    current[i] = surface_create(2048, 2048);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free surfaces
if(surface_exists(shadows)) {
    surface_free(shadows);
}
for(var i = 0; i &lt; array_length_1d(current); i++) {
    if(surface_exists(current[i])) {
        surface_free(current[i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw shadows of walls
var redraw = newRoom;
newRoom = false;
if(webgl_enabled == true || os_browser == browser_not_a_browser) {
    if(!surface_exists(shadows)) {
        shadows = surface_create(2048, 2048);
        redraw = true;
    } else if(instance_number(Wall) != wallCount) {
        wallCount = instance_number(Wall);
        redraw = true;
    } else {
        with(Wall) {
            if(moved) {
                redraw = true;
                moved = false;
            }
        }
        with(Lightbulb) {
            if(beenlit) {
                redraw = true;
                beenlit = false;
            }
        }
    }
    if(Controller.colours[BLACK]) {
        if(redraw) {
            surface_set_target(shadows);
            draw_clear_alpha(c_black, 0);
            draw_set_color(c_black);
            draw_set_alpha(1);
            //Straight below
            with(Wall) {
                if(visible) { 
                    draw_rectangle(bbox_left, bbox_bottom, bbox_right + (webgl_enabled &amp;&amp; os_browser != browser_not_a_browser), room_height, false);
                }
            }
            surface_reset_target();
            //Each light
            for(var i = 0; i &lt; instance_number(Lightbulb); i++) {
                if(array_length_1d(current) &lt;= i) {
                    current[i] = noone;
                }
                if(!surface_exists(current[i])) {
                    current[i] = surface_create(2048, 2048);
                }
                var inst = instance_find(Lightbulb, i);
                surface_set_target(current[i]);
                if(inst.lit) {
                    draw_clear_alpha(c_black, 0);
                    with(Wall) {
                        var x0 = bbox_left, x1 = bbox_right,
                            y0 = bbox_top, y1 = bbox_bottom;
                        if(visible) {
                            //From top edge
                            var m = 0, dist, dest;
                            dist[1] = 0;
                            dest[1] = 0;
                            if(y0 &gt;= inst.y) {
                                if(inst.y != y0) {
                                    m = (x0 - inst.x) / (y0 - inst.y);
                                } else {
                                    m = 0;
                                }
                                if(inst.y &lt; y0) {
                                    dist[0] = (room_height - y0) * m;
                                    dest[0] = room_height;
                                } else if(inst.y &gt; y0) {
                                    dist[0] = y0 * -m;
                                    dest[0] = 0;
                                } else {
                                    dist[0] = 0;
                                    dest[0] = y0;
                                }
                                if(inst.y != y0) {
                                    m = ((x1 + 1) - inst.x) / (y0 - inst.y);
                                } else {
                                    m = 0;
                                }
                                if(inst.y &lt; y0) {
                                    dist[1] = (room_height - y0) * m;
                                    dest[1] = room_height;
                                } else if(inst.y &gt; y0) {
                                    dist[1] = y0 * -m;
                                    dest[1] = 0;
                                } else {
                                    dist[1] = 0;
                                    dest[1] = y0;
                                }
                                draw_primitive_begin(pr_trianglestrip);
                                draw_vertex(x0, y0);
                                draw_vertex(x1 + 1, y0);
                                draw_vertex(x0 + dist[0], dest[0]);
                                draw_vertex(x1 + 1 + dist[1], dest[1]);
                                draw_primitive_end();
                            }
                            
                            //From bottom edge
                            if(y1 &lt;= inst.y) {
                                if(inst.y != (y1 + 1)) {
                                    m = (x0 - inst.x) / ((y1 + 1) - inst.y);
                                } else {
                                    m = 0;
                                }
                                if(inst.y &lt; (y1 + 1)) {
                                    dist[0] = (room_height - (y1 + 1)) * m;
                                    dest[0] = room_height;
                                } else if(inst.y &gt; (y1 + 1)) {
                                    dist[0] = (y1 + 1) * -m;
                                    dest[0] = 0;
                                } else {
                                    dist[0] = 0;
                                    dest[0] = (y1 + 1);
                                }
                                if(inst.y != (y1 + 1)) {
                                    m = ((x1 + 1) - inst.x) / ((y1 + 1) - inst.y);
                                } else {
                                    m = 0;
                                }
                                if(inst.y &lt; (y1 + 1)) {
                                    dist[1] = (room_height - (y1 + 1)) * m;
                                    dest[1] = room_height;
                                } else if(inst.y &gt; (y1 + 1)) {
                                    dist[1] = (y1 + 1) * -m;
                                    dest[1] = 0;
                                } else {
                                    dist[1] = 0;
                                    dest[1] = (y1 + 1);
                                }
                                draw_primitive_begin(pr_trianglestrip);
                                draw_vertex(x0, y1 + 1);
                                draw_vertex(x1 + 1, y1 + 1);
                                draw_vertex(x0 + dist[0], dest[0]);
                                draw_vertex(x1 + 1 + dist[1], dest[1]);
                                draw_primitive_end();
                            }
                            
                            //From left side
                            if(x0 &gt;= inst.x) {
                                if(inst.x != x0) {
                                    m = (y0 - inst.y) / (x0 - inst.x)
                                } else {
                                    m = 0;
                                }
                                if(inst.x &lt; x0) {
                                    dist[0] = (room_width - x0) * m;
                                    dest[0] = room_width;
                                } else if(inst.x &gt; x0) {
                                    dist[0] = x0 * -m;
                                    dest[0] = 0;
                                } else {
                                    dist[0] = 0;
                                    dest[0] = x0;
                                }
                                if(inst.x != x0) {
                                    m = ((y1 + 1) - inst.y) / (x0 - inst.x);
                                } else {
                                    m = 0;
                                }
                                if(inst.x &lt; x0) {
                                    dist[1] = (room_width - x0) * m;
                                    dest[1] = room_width;
                                } else if(inst.x &gt; x0) {
                                    dist[1] = x0 * -m;
                                    dest[1] = 0;
                                } else {
                                    dist[1] = 0;
                                    dest[1] = x0;
                                }
                                draw_primitive_begin(pr_trianglestrip);
                                draw_vertex(x0, y0);
                                draw_vertex(x0, y1 + 1);
                                draw_vertex(dest[0], y0 + dist[0]);
                                draw_vertex(dest[1], y1 + 1 + dist[1]);
                                draw_primitive_end();
                            }
                            
                            //From right side
                            if(x1 &lt;= inst.x) {
                                if(inst.x != (x1 + 1)) {
                                    m = (y0 - inst.y) / ((x1 + 1) - inst.x)
                                } else {
                                    m = 0;
                                }
                                if(inst.x &lt; (x1 + 1)) {
                                    dist[0] = (room_width - (x1 + 1)) * m;
                                    dest[0] = room_width;
                                } else if(inst.x &gt; (x1 + 1)) {
                                    dist[0] = (x1 + 1) * -m;
                                    dest[0] = 0;
                                } else {
                                    dist[0] = 0;
                                    dest[0] = (x1 + 1);
                                }
                                if(inst.x != (x1 + 1)) {
                                    m = ((y1 + 1) - inst.y) / ((x1 + 1) - inst.x);
                                } else {
                                    m = 0;
                                }
                                if(inst.x &lt; (x1 + 1)) {
                                    dist[1] = (room_width - (x1 + 1)) * m;
                                    dest[1] = room_width;
                                } else if(inst.x &gt; (x1 + 1)) {
                                    dist[1] = (x1 + 1) * -m;
                                    dest[1] = 0;
                                } else {
                                    dist[1] = 0;
                                    dest[1] = (x1 + 1);
                                }
                                draw_primitive_begin(pr_trianglestrip);
                                draw_vertex(x1 + 1, y0);
                                draw_vertex(x1 + 1, y1 + 1);
                                draw_vertex(dest[0], y0 + dist[0]);
                                draw_vertex(dest[1], y1 + 1 + dist[1]);
                                draw_primitive_end();
                            }
                        }
                    }
                } else {
                    draw_clear(c_black);
                }
                surface_reset_target();
                surface_set_target(shadows);
                draw_set_blend_mode_ext(bm_dest_color, bm_src_color);
                draw_surface_ext(current[i], 0, 0, 1, 1, 0, c_black, 1);
                draw_set_blend_mode(bm_normal);
                surface_reset_target();
            }
            /* surface_set_target(shadows);
            draw_set_blend_mode_ext(bm_dest_color, bm_src_color);
            for(var i = 0; i &lt; array_length_1d(current); i++) {
                if(surface_exists(current[i])) {
                    draw_surface_ext(current[i], 0, 0, 1, 1, 0, c_black, 1);
                }
            }
            draw_set_blend_mode(bm_normal);
            surface_reset_target(); */
        }
        draw_surface_ext(shadows, 0, 0, 1, 1, 0, c_black, 0.3 + (0.1 * (os_browser != browser_not_a_browser)));
    }
} else {
    if(Controller.colours[BLACK]) {
        if(instance_number(Wall) != wallCount) {
            wallCount = instance_number(Wall);
            redraw = true;
        } else {
            with(Wall) {
                if(moved) {
                    redraw = true;
                    moved = false;
                }
            }
            with(Lightbulb) {
                if(beenlit) {
                    redraw = true;
                    beenlit = false;
                }
            }
        }
        var walls = "", lights = "";
        for(var i = 0; i &lt; instance_number(Wall); i++) {
            var inst = instance_find(Wall, i);
            if(inst.visible) {
                walls += string(inst.bbox_left) + " " + string(inst.bbox_top) + " " + string(inst.bbox_right) + " " + string(inst.bbox_bottom) + " ";
            }
        }
        for(var i = 0; i &lt; instance_number(Lightbulb); i++) {
            var inst = instance_find(Lightbulb, i);
            if(inst.lit) {
                lights += string(inst.x) + " " + string(inst.y) + " ";
            }
        }
        shadow_shadow(walls, lights, redraw);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
