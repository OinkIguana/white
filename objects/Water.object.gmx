<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sWater</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>_Terrain</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
type = T_NONE;
frame = 0;
timer = 2;
dir = 1;
inst = noone;
maxSize = image_yscale;
minSize = image_yscale;
waitSize = image_yscale;
size = image_yscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a Wall behind it if not blue
if(!Controller.colours[BLUE]) {
    if(!place_meeting(x, y, Wall)) {
        inst = instance_create(x, y, Wall);
        with(inst) {
            image_xscale = other.image_xscale;
            image_yscale = other.image_yscale;
            type = other.type;
        }
    }
} else {
    if(inst != noone) {
        with(inst) instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grow when the closest pipe is active
if(waitSize == minSize) {
    waitSize = maxSize;
}
if(minSize != maxSize) {
    var pipe = instance_nearest(x, y, Pipe);
    if(pipe != noone) {
        size = clamp(size + (1/8) * pipe.active, minSize, waitSize);
        image_yscale = min(size, maxSize);
        y = ystart - (image_yscale - minSize) * sprite_get_height(sprite_index);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw as cells, not as a stretched image
if(Controller.colours[BLUE]) {
    var w = sprite_get_width(sprite_index);
    var h = sprite_get_height(sprite_index);
    draw_set_alpha(1);
    for(var i = x; i &lt; x + sprite_width; i += w) {
        for(var j = y; j &lt; y + sprite_height; j+= h) {
            draw_sprite(sprite_index, 0, i, j);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw waves
if(Controller.colours[BLUE]) {
    if(!--timer) {
        frame = (frame + 1) % sprite_get_number(sWaterWaves);
        timer = 2;
    }
    for(var i = 0; i &lt; sprite_width; i += 16) {
        var inst = collision_rectangle(x + i, y - 1, x + i + 16 - 1, y + 1, _Terrain, false, true);
        if(inst == noone) {
            draw_sprite_ext(sWaterWaves, frame, x + i + (16 * (dir == -1)), y - sprite_get_height(sWaterWaves), dir, 1, 0, image_blend, image_alpha);
        } else if(inst.object_index == Crate) {
            draw_sprite_ext(sWaterWaves, frame, x + i + (16 * (dir == -1)), y - sprite_get_height(sWaterWaves), dir, 1, 0, image_blend, image_alpha);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
