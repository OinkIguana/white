<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sColorPanel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inititalize
for(var i = 0; i &lt;= BROWN; i++) {
    prev[i] = Controller.colours[i];
}
for(var i = BROWN; i &gt; 0; i--) {
    colours[i] = false;
}
colours[WHITE] = true;

image_blend = Controller.image_blend;
defaultBGCol = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values
for(var i = 0; i &lt;= BROWN; i++) {
    Controller.colours[i] = prev[i];
}
Controller.image_blend = image_blend;
background_color = image_blend;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change colour scheme
for(var i = 0; i &lt;= BROWN; i++) {
    Controller.colours[i] = colours[i];
}
if(!colours[coltonum(Controller.image_blend)]) {
    Controller.image_blend = defaultBGCol;
    background_color = defaultBGCol;
}
set_tiles();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw squares of allowed colours
var done = 0;
if(colours[WHITE]) {
    draw_set_color(c_white);
    draw_rectangle(x + 1 + ((done % 4) * 8), y + 1 + ((done div 4) * 8), x + 1 + ((done % 4) * 8) + 6, y + 1 + ((done div 4) * 8) + 6, false);
    done++;
}
if(colours[BLACK]) {
    draw_set_color(c_black);
    draw_rectangle(x + 1 + ((done % 4) * 8), y + 1 + ((done div 4) * 8), x + 1 + ((done % 4) * 8) + 6, y + 1 + ((done div 4) * 8) + 6, false);
    done++;
}
if(colours[RED]) {
    draw_set_color(c_red);
    draw_rectangle(x + 1 + ((done % 4) * 8), y + 1 + ((done div 4) * 8), x + 1 + ((done % 4) * 8) + 6, y + 1 + ((done div 4) * 8) + 6, false);
    done++;
}
if(colours[GREEN]) {
    draw_set_color(c_green);
    draw_rectangle(x + 1 + ((done % 4) * 8), y + 1 + ((done div 4) * 8), x + 1 + ((done % 4) * 8) + 6, y + 1 + ((done div 4) * 8) + 6, false);
    done++;
}
if(colours[BLUE]) {
    draw_set_color(c_blue);
    draw_rectangle(x + 1 + ((done % 4) * 8), y + 1 + ((done div 4) * 8), x + 1 + ((done % 4) * 8) + 6, y + 1 + ((done div 4) * 8) + 6, false);
    done++;
}
if(colours[YELLOW]) {
    draw_set_color(c_yellow);
    draw_rectangle(x + 1 + ((done % 4) * 8), y + 1 + ((done div 4) * 8), x + 1 + ((done % 4) * 8) + 6, y + 1 + ((done div 4) * 8) + 6, false);
    done++;
}
if(colours[BROWN]) {
    draw_set_color(Controller.c_brown);
    draw_rectangle(x + 1 + ((done % 4) * 8), y + 1 + ((done div 4) * 8), x + 1 + ((done % 4) * 8) + 6, y + 1 + ((done div 4) * 8) + 6, false);
    done++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
