<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>_Cover</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw shadows
if(surface_exists(surf)) {
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    draw_set_color(c_black);
    var inst = instance_find(Player, 0);
    if(inst != noone) {
        with(Wall) {
            var top = bbox_top, bottom = bbox_bottom + 1, left = bbox_left, right = bbox_right + 1;
            if((inst.y - inst.sprite_yoffset) &lt;= top) {
                top += 16;
            } else if((inst.y - inst.sprite_yoffset) &gt;= bottom) {
                bottom -= 16;
            }
            if(inst.x &lt;= left) {
                left += 16;
            } else if(inst.x &gt;= right) {
                right -= 16;
            }
            if(visible) {
                ///From top edge
                var m = 0, dist, dest;
                dist[1] = 0;
                dest[1] = 0;
                if((inst.y - inst.sprite_yoffset) != top) {
                    m = (left - inst.x) / (top - (inst.y - inst.sprite_yoffset));
                } else {
                    m = 0;
                }
                if((inst.y - inst.sprite_yoffset) &lt; top) {
                    dist[0] = (room_height - top) * m;
                    dest[0] = room_height;
                } else if((inst.y - inst.sprite_yoffset) &gt; top) {
                    dist[0] = top * -m;
                    dest[0] = 0;
                } else {
                    dist[0] = 0;
                    dest[0] = top;
                }
                draw_triangle(left, top, (right), top, left + dist[0], dest[0], false);
                if((inst.y - inst.sprite_yoffset) != top) {
                    m = ((right) - inst.x) / (top - (inst.y - inst.sprite_yoffset));
                } else {
                    m = 0;
                }
                if((inst.y - inst.sprite_yoffset) &lt; top) {
                    dist[1] = (room_height - top) * m;
                    dest[1] = room_height;
                } else if((inst.y - inst.sprite_yoffset) &gt; top) {
                    dist[1] = top * -m;
                    dest[1] = 0;
                } else {
                    dist[1] = 0;
                    dest[1] = top;
                }
                draw_triangle((right) + dist[1], dest[1], (right), top, left + dist[0], dest[0], false);
                
                //From bottom edge
                if((inst.y - inst.sprite_yoffset) != (bottom)) {
                    m = (left - inst.x) / ((bottom) - (inst.y - inst.sprite_yoffset));
                } else {
                    m = 0;
                }
                if((inst.y - inst.sprite_yoffset) &lt; (bottom)) {
                    dist[0] = (room_height - (bottom)) * m;
                    dest[0] = room_height;
                } else if((inst.y - inst.sprite_yoffset) &gt; (bottom)) {
                    dist[0] = (bottom) * -m;
                    dest[0] = 0;
                } else {
                    dist[0] = 0;
                    dest[0] = (bottom);
                }
                draw_triangle(left, (bottom), (right), (bottom), left + dist[0], dest[0], false);
                if((inst.y - inst.sprite_yoffset) != (bottom)) {
                    m = ((right) - inst.x) / ((bottom) - (inst.y - inst.sprite_yoffset));
                } else {
                    m = 0;
                }
                if((inst.y - inst.sprite_yoffset) &lt; (bottom)) {
                    dist[1] = (room_height - (bottom)) * m;
                    dest[1] = room_height;
                } else if((inst.y - inst.sprite_yoffset) &gt; (bottom)) {
                    dist[1] = (bottom) * -m;
                    dest[1] = 0;
                } else {
                    dist[1] = 0;
                    dest[1] = (bottom);
                }
                draw_triangle((right) + dist[1], dest[1], (right), (bottom), left + dist[0], dest[0], false);
                
                //From left side
                if(inst.x != left) {
                    m = (top - (inst.y - inst.sprite_yoffset)) / (left - inst.x)
                } else {
                    m = 0;
                }
                if(inst.x &lt; left) {
                    dist[0] = (room_width - left) * m;
                    dest[0] = room_width;
                } else if(inst.x &gt; left) {
                    dist[0] = left * -m;
                    dest[0] = 0;
                } else {
                    dist[0] = 0;
                    dest[0] = left;
                }
                draw_triangle(left, top, left, (bottom), dest[0], top + dist[0], false);
                if(inst.x != left) {
                    m = ((bottom) - (inst.y - inst.sprite_yoffset)) / (left - inst.x);
                } else {
                    m = 0;
                }
                if(inst.x &lt; left) {
                    dist[1] = (room_width - left) * m;
                    dest[1] = room_width;
                } else if(inst.x &gt; left) {
                    dist[1] = left * -m;
                    dest[1] = 0;
                } else {
                    dist[1] = 0;
                    dest[1] = left;
                }
                draw_triangle(dest[1], (bottom) + dist[1], left, (bottom), dest[0], top + dist[0], false);
                
                //From right side
                if(inst.x != (right)) {
                    m = (top - (inst.y - inst.sprite_yoffset)) / ((right) - inst.x)
                } else {
                    m = 0;
                }
                if(inst.x &lt; (right)) {
                    dist[0] = (room_width - (right)) * m;
                    dest[0] = room_width;
                } else if(inst.x &gt; (right)) {
                    dist[0] = (right) * -m;
                    dest[0] = 0;
                } else {
                    dist[0] = 0;
                    dest[0] = (right);
                }
                draw_triangle((right), top, (right), (bottom), dest[0], top + dist[0], false);
                if(inst.x != (right)) {
                    m = ((bottom) - (inst.y - inst.sprite_yoffset)) / ((right) - inst.x);
                } else {
                    m = 0;
                }
                if(inst.x &lt; (right)) {
                    dist[1] = (room_width - (right)) * m;
                    dest[1] = room_width;
                } else if(inst.x &gt; (right)) {
                    dist[1] = (right) * -m;
                    dest[1] = 0;
                } else {
                    dist[1] = 0;
                    dest[1] = (right);
                }
                draw_triangle(dest[1], (bottom) + dist[1], (right), (bottom), dest[0], top + dist[0], false);
            }
        }
    }
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
