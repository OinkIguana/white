<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sWall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>Wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Type to wood
event_inherited();
type = T_WOOD;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Float and sink
var inst;
event_inherited();
if(image_blend == Controller.c_brown) {
    if(place_meeting(x, y - 13, Water)) {
        vspeed = max(vspeed - 1, -2); //Float
        inst = instance_place(x, y + vspeed, Wall);
        if(inst != noone) {
            if(inst.object_index == Crate) { //Push other Crates upwards
                with(inst) {
                    if(!place_meeting(x, other.y + other.vspeed - 16, Wall)) {
                        y = other.y + other.vspeed - 16;
                    } else {
                        other.vspeed = 0;
                        other.y = y + 16;
                    }
                }
            } else {
                vspeed = 0;
            }
        } else if(place_meeting(x, y + vspeed - Player.vspeed, Player)) {
            vspeed = 0;
        }
    } else if(place_meeting(x, y - 10, Water)) {
        inst = instance_place(x, y - 2, Crate);
        if(inst != noone) {
            inst.y = y - 16;
        }
        vspeed = 0; //Stop at the top
    } else if(!place_meeting(x, y + 1, Wall)) {
        if(!place_meeting(x, y + 2, Crate)) {
            if(place_meeting(x, y, Water)) {
                vspeed = 2;
            } else {
                if(!place_meeting(x, y + 1, Player)) {
                    vspeed = min(vspeed + 1, 10); //Gravity
                }
            }
        } else {
            inst = instance_place(x, y + 2, Crate);
            y = inst.y - 16;
            vspeed = 0;
        }
    } else {
        vspeed = 0;
    }
    if(vspeed != 0) {
        if(place_meeting(x, y + vspeed, Wall)) { //Stop at walls
            while(!place_meeting(x, y + sign(vspeed), Wall)) {
                y += sign(vspeed);
            }
            vspeed = 0;
        } else if(place_meeting(x, y + vspeed, Player)) { //Stop at Player
            while(!place_meeting(x, y + sign(vspeed), Player)) {
                y += sign(vspeed);
            }
            vspeed = 0;
        }
    }
    if(place_meeting(x, y, Water)) { //Splash if just landed
        if(!place_meeting(xprevious, yprevious, Water)) {
            instance_create(x, floor((y + vspeed) / 16) * 16, Splash);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose colour and draw
if(Controller.colours[BROWN]) {
    image_blend = Controller.c_brown;
} else {
    image_blend = c_white;
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
